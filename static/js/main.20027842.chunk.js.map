{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","cardChosen","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAEe,SAASA,EAAT,GAA8D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAO7D,OACQ,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACI,qBAAKG,IAAKL,EAAKK,IAAKD,UAAU,QAAQE,IAAI,eAC1C,qBACID,IAAI,gBACJD,UAAU,OACVE,IAAI,YACJC,QAbA,WACZJ,GACAF,EAAaD,WCFzB,IAAMQ,EAAa,CACjB,CAAC,IAAO,gBAAiBC,SAAS,GAClC,CAAC,IAAO,gBAAiBA,SAAS,GAClC,CAAC,IAAO,gBAAiBA,SAAS,GAClC,CAAC,IAAO,gBAAiBA,SAAS,GAClC,CAAC,IAAO,gBAAiBA,SAAS,GAClC,CAAC,IAAO,gBAAiBA,SAAS,IAuFrBC,MApFf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGaF,mBAAS,GAHtB,mBAGNG,EAHM,KAGCC,EAHD,OAKqBJ,mBAAS,MAL9B,mBAKNK,EALM,KAKKC,EALL,OAMqBN,mBAAS,MAN9B,mBAMNO,EANM,KAMKC,EANL,OAQmBR,oBAAS,GAR5B,mBAQNR,EARM,KAQIiB,EARJ,KAWPC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAS,MACzBC,KAAI,SAAC1B,GAAD,mBAAC,eAAgBA,GAAjB,IAAuB2B,GAAIH,KAAKC,cAErCR,EAAa,MACbE,EAAa,MAEbN,EAASS,GACTP,EAAS,IAGPd,EAAe,SAAC2B,GACpBZ,EAAYG,EAAaS,GAAcX,EAAaW,IAItDC,qBAAU,WAELb,GAAaE,IACdE,GAAY,GACTJ,EAAUX,MAAQa,EAAUb,KAC7BQ,GAAS,SAAAiB,GACP,OAAOA,EAAUJ,KAAI,SAAA1B,GACnB,OAAGA,EAAKK,MAAQW,EAAUX,IACjB,2BAAIL,GAAX,IAAiBS,SAAS,IAEnBT,QAIb+B,KAGAC,YAAW,kBAAMD,MAAa,QAGjC,CAACf,EAAWE,IAIf,IAAMa,EAAY,WAChBd,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAkB,GAAS,OAAIA,EAAY,KAClCb,GAAY,IAQd,OAJAS,qBAAU,WACRR,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBACA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAAUF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC3DN,SAAUA,GAJLH,EAAK2B,SAQhB,wCAAWb,SCtFjBoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.20027842.chunk.js","sourcesContent":["import './SingleCard.css'\n\nexport default function SingleCard({card, handleChoice, flipped, disabled}) {\n\n    const handleClick = () => {\n        if(!disabled){\n            handleChoice(card)\n        }\n    }\n    return (\n            <div className='card'>\n                <div className={flipped ? \"flipped\" : \"\"}>\n                    <img src={card.src} className='front' alt='card-front' />\n                    <img \n                        src='img/cover.png' \n                        className='back' \n                        alt='card-back'\n                        onClick={handleClick} \n                    />\n                </div>\n            </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\n\nconst cardImages = [\n  {\"src\": \"/img/cat1.png\", matched: false},\n  {\"src\": \"/img/cat2.png\", matched: false},\n  {\"src\": \"/img/cat3.png\", matched: false},\n  {\"src\": \"/img/cat4.png\", matched: false},\n  {\"src\": \"/img/cat5.png\", matched: false},\n  {\"src\": \"/img/cat6.png\", matched: false}\n]\n\nfunction App() {\n\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n\n  const [disabled, setDisabled] = useState(false)\n  \n  //shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random()-0.5)\n      .map((card) => ( { ...card, id: Math.random() } ))\n\n      setChoiceOne(null)\n      setChoiceTwo(null)\n\n      setCards(shuffledCards)\n      setTurns(0)\n  }\n  // Handle A Choice\n  const handleChoice = (cardChosen) => {\n    choiceOne ? setChoiceTwo(cardChosen) : setChoiceOne(cardChosen)\n  }\n  \n  //compare two selected cards\n  useEffect(() => {\n    \n    if(choiceOne && choiceTwo){\n      setDisabled(true)\n      if(choiceOne.src === choiceTwo.src){\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if(card.src === choiceOne.src){\n              return {...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        \n        setTimeout(() => resetTurn(), 1000) \n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n  \n  //reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  // start the game automatically\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n            key={card.id} \n            card={card}\n            handleChoice={handleChoice}\n            flipped={ card === choiceOne || card === choiceTwo || card.matched }\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}